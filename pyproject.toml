# pyproject.toml
[build-system]
requires = ["hatchling>=1.13.0"]
build-backend = "hatchling.build"

[project]
name = "dxf-checker"
dynamic = ["version"]
description = "A comprehensive tool for validating DXF segment integrity and detecting geometry issues"
readme = "README.md"
license = "MIT"
requires-python = ">=3.8"
authors = [
    { name = "Your Name", email = "your.email@example.com" },
]
maintainers = [
    { name = "Your Name", email = "your.email@example.com" },
]
keywords = [
    "dxf",
    "cad",
    "geometry",
    "validation",
    "checker",
    "autocad",
    "engineering"
]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Intended Audience :: End Users/Desktop",
    "Topic :: Scientific/Engineering",
    "Topic :: Scientific/Engineering :: CAD",
    "Topic :: Software Development :: Quality Assurance",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
dependencies = [
    "ezdxf>=1.0.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "flake8>=6.0",
    "black>=23.0",
    "isort>=5.12",
    "mypy>=1.0",
    "pre-commit>=3.0",
]
test = [
    "pytest>=7.0",
    "pytest-cov>=4.0",
    "pytest-mock>=3.10",
]
docs = [
    "sphinx>=5.0",
    "sphinx-rtd-theme>=1.2",
    "myst-parser>=1.0",
]

[project.urls]
Homepage = "https://github.com/yourusername/checkmatell-dxf-checker"
Documentation = "https://github.com/yourusername/checkmatell-dxf-checker#readme"
Repository = "https://github.com/yourusername/checkmatell-dxf-checker"
"Bug Tracker" = "https://github.com/yourusername/checkmatell-dxf-checker/issues"
Changelog = "https://github.com/yourusername/checkmatell-dxf-checker/blob/main/CHANGELOG.md"

[project.scripts]
dxf-checker = "dxf_checker.main:main"
checkmatell-dxf = "dxf_checker.main:main"

[tool.hatch.version]
path = "dxf_checker/__init__.py"

[tool.hatch.build.targets.wheel]
packages = ["dxf_checker"]

[tool.hatch.build.targets.sdist]
include = [
    "/dxf_checker",
    "/tests",
    "/README.md",
    "/CHANGELOG.md",
    "/LICENSE",
]

# Black code formatting
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["dxf_checker"]

# pytest configuration
[tool.pytest.ini_options]
minversion = "7.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=dxf_checker",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_functions = ["test_*"]
python_classes = ["Test*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

# Coverage configuration
[tool.coverage.run]
source = ["dxf_checker"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__init__.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Set to true when you add type hints
disallow_incomplete_defs = false  # Set to true when you add type hints
check_untyped_defs = true
disallow_untyped_decorators = false  # Set to true when you add type hints
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "ezdxf.*",
]
ignore_missing_imports = true

# Flake8 configuration (in setup.cfg since flake8 doesn't support pyproject.toml yet)
# But we can document it here for reference:
# [flake8]
# max-line-length = 88
# extend-ignore = E203, W503
# exclude = .git,__pycache__,build,dist,.eggs

# Bandit security linting
[tool.bandit]
exclude_dirs = ["tests"]
skips = ["B101"]  # Skip assert_used test

# Pre-commit hooks configuration
[tool.pre-commit]
repos = [
    {
        repo = "https://github.com/pre-commit/pre-commit-hooks",
        rev = "v4.4.0",
        hooks = [
            { id = "trailing-whitespace" },
            { id = "end-of-file-fixer" },
            { id = "check-yaml" },
            { id = "check-added-large-files" },
            { id = "check-merge-conflict" },
        ]
    },
    {
        repo = "https://github.com/psf/black",
        rev = "23.7.0",
        hooks = [{ id = "black" }]
    },
    {
        repo = "https://github.com/pycqa/isort",
        rev = "5.12.0",
        hooks = [{ id = "isort" }]
    },
    {
        repo = "https://github.com/pycqa/flake8",
        rev = "6.0.0",
        hooks = [{ id = "flake8" }]
    },
]