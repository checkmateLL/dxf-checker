name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on version tags like v1.0.0, v1.1.0, etc.

permissions:
  contents: write  # Required for creating releases

jobs:
  release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        pip install -e .

    - name: Extract version from tag
      id: get_version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "Version: $VERSION"

    - name: Verify version consistency
      run: |
        PACKAGE_VERSION=$(python -c "from checkmatell_dxf_checker import __version__; print(__version__)")
        TAG_VERSION=${{ steps.get_version.outputs.version }}
        echo "Package version: $PACKAGE_VERSION"
        echo "Tag version: $TAG_VERSION"
        if [ "$PACKAGE_VERSION" != "$TAG_VERSION" ]; then
          echo "❌ Version mismatch: package=$PACKAGE_VERSION, tag=$TAG_VERSION"
          exit 1
        fi
        echo "✅ Version consistency verified: $PACKAGE_VERSION"

    - name: Run tests before release
      run: |
        python -c "from checkmatell_dxf_checker import main; print('Import test passed')"
        python -m checkmatell_dxf_checker.main --help
        echo "✅ Basic functionality tests passed"

    - name: Build package
      run: |
        python -m build
        echo "✅ Package built successfully"
        ls -la dist/

    - name: Generate release notes
      id: changelog
      run: |
        VERSION=${{ steps.get_version.outputs.version }}
        echo "Extracting changelog for version $VERSION"
        
        # Create release notes file
        echo "# Release $VERSION" > release_notes.md
        echo "" >> release_notes.md
        
        # Try to extract from CHANGELOG.md if it exists
        if [ -f "CHANGELOG.md" ]; then
          echo "Extracting from CHANGELOG.md..."
          # Extract section between this version and next version/end
          awk "/## \[$VERSION\]/{flag=1; next} /## \[/{flag=0} flag && !/^$/" CHANGELOG.md >> release_notes.md
          
          # If nothing was extracted, add default message
          if [ $(wc -l < release_notes.md) -eq 2 ]; then
            echo "See [CHANGELOG.md](CHANGELOG.md) for details." >> release_notes.md
          fi
        else
          echo "No CHANGELOG.md found, using default release notes"
          echo "This release includes improvements and bug fixes." >> release_notes.md
          echo "" >> release_notes.md
          echo "## Changes" >> release_notes.md
          echo "- Various improvements and bug fixes" >> release_notes.md
        fi
        
        echo "Release notes content:"
        cat release_notes.md

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.version }}
        body_path: release_notes.md
        files: |
          dist/*
        draft: false
        prerelease: ${{ contains(steps.get_version.outputs.version, 'alpha') || contains(steps.get_version.outputs.version, 'beta') || contains(steps.get_version.outputs.version, 'rc') }}

    # Uncomment when ready to publish to PyPI
    # - name: Publish to Test PyPI
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
    #   run: |
    #     twine upload --repository testpypi dist/*

    # - name: Publish to PyPI
    #   if: "!contains(steps.get_version.outputs.version, 'alpha') && !contains(steps.get_version.outputs.version, 'beta')"
    #   env:
    #     TWINE_USERNAME: __token__
    #     TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
    #   run: |
    #     twine upload dist/*